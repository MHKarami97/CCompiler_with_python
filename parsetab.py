
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftTIMESDIVIDEAND ASSIGN BREAK CBRACELET CLOSEBR COMMA DIVIDE DIVIDE_ASSIGN DO ELSE EQUALS FALSE FLOAT FLOAT_NUMBER FOR ID IF INT LARGE LARGETHAN LESS LESSTHAN LPAREN MINUS MINUSMINUS MINUS_ASSIGN NOTEQUAL NUMBER OBRACELET OPENBR PLUS PLUSPLUS PLUS_ASSIGN RPAREN SEMICOLON STRING TIMES TIMES_ASSIGN TRUE VOID WHILEprogram : declaration_listdeclaration_list : declaration_list declarationdeclaration_list : declarationdeclaration : var_declarationdeclaration : fun_declarationvar_declaration : type_specifier var_decl_list SEMICOLONvar_declaration : type_specifier error SEMICOLONvar_decl_list : var_decl_list COMMA var_decl_idvar_decl_list : var_decl_idvar_decl_id : IDvar_decl_id : ID OPENBR NUMBER CLOSEBRvar_decl_id : ID ASSIGN ID\n        | ID ASSIGN NUMBER\n        | ID ASSIGN FLOAT_NUMBER\n        | ID ASSIGN STRINGtype_specifier : INT\n    | FLOAT\n    | VOID\n    | STRINGfun_declaration : type_specifier ID LPAREN params RPAREN statementparams : param_listparams : param_list : param_list COMMA param_type_list param_list : param_type_listparam_type_list : type_specifier param_id_listparam_id_list : param_id_list COMMA param_idparam_id_list : param_idparam_id : IDcompound_stmt : OBRACELET local_declarations statement_list local_declarations CBRACELETlocal_declarations : local_declarations var_declarationlocal_declarations :statement_list : statement statement_liststatement_list :statement : expression_stmt\n    | compound_stmt\n    | if_stmt\n    | while_stmt\n    | for_stmt\n    | do_while_stmt\n    | break_stmtexpression_stmt : expression SEMICOLONexpression_stmt : SEMICOLONdo_while_stmt : do statement while LPAREN expression RPARENdo : DOif_stmt : if LPAREN expression RPAREN statementif_stmt : if LPAREN expression RPAREN statement else statementif : IFelse : ELSE while_stmt : while LPAREN expression RPAREN statementwhile : WHILEfor_stmt : for LPAREN var_declaration expression SEMICOLON expression RPAREN statementfor : FORbreak_stmt : BREAK SEMICOLON expression : var ASSIGN expression\n      | var addopration_expression expression\n      | var mulopration_expression expression \n      | ID PLUSPLUS\n      | ID MINUSMINUS\n      expression : simple_expression  addopration_expression : PLUS_ASSIGN\n    | MINUS_ASSIGN mulopration_expression : TIMES_ASSIGN\n    | DIVIDE_ASSIGNvar : IDvar : ID OPENBR NUMBER CLOSEBRsimple_expression : simple_expression AND unary_rel_expressionsimple_expression : unary_rel_expressionunary_rel_expression : NOTEQUAL unary_rel_expressionunary_rel_expression : rel_expressionrel_expression :  add_expression relop add_expression rel_expression : add_expressionrelop : EQUALS\n                  | LESS\n                  | LARGE\n                  | LARGETHAN\n                  | LESSTHAN\n                  | NOTEQUALadd_expression : add_expression addop term add_expression : termaddop : PLUS\n            | MINUS\n            term : term mulop unary_expression term : unary_expressionmulop : TIMES\n            | DIVIDEunary_expression : addop unary_expressionunary_expression : factorfactor : LPAREN expression RPAREN \n    | var \n    | call \n    | constantconstant : TRUE \n    | FALSEconstant : NUMBER constant : FLOAT_NUMBER call : ID LPAREN args RPARENargs : args_list\n    |args_list : args_list COMMA expression\n    | expression'
    
_lr_action_items = {'INT':([0,2,3,4,5,11,16,18,19,37,42,43,44,45,46,47,48,49,51,52,87,88,91,93,122,123,124,140,141,147,148,149,155,156,158,],[7,7,-3,-4,-5,-2,-6,-7,7,7,-20,-34,-35,-36,-37,-38,-39,-40,-42,-31,-41,7,7,-53,-31,-30,-33,7,-32,-29,-45,-49,-43,-46,-51,]),'FLOAT':([0,2,3,4,5,11,16,18,19,37,42,43,44,45,46,47,48,49,51,52,87,88,91,93,122,123,124,140,141,147,148,149,155,156,158,],[8,8,-3,-4,-5,-2,-6,-7,8,8,-20,-34,-35,-36,-37,-38,-39,-40,-42,-31,-41,8,8,-53,-31,-30,-33,8,-32,-29,-45,-49,-43,-46,-51,]),'VOID':([0,2,3,4,5,11,16,18,19,37,42,43,44,45,46,47,48,49,51,52,87,88,91,93,122,123,124,140,141,147,148,149,155,156,158,],[9,9,-3,-4,-5,-2,-6,-7,9,9,-20,-34,-35,-36,-37,-38,-39,-40,-42,-31,-41,9,9,-53,-31,-30,-33,9,-32,-29,-45,-49,-43,-46,-51,]),'STRING':([0,2,3,4,5,11,16,18,19,21,37,42,43,44,45,46,47,48,49,51,52,87,88,91,93,122,123,124,140,141,147,148,149,155,156,158,],[10,10,-3,-4,-5,-2,-6,-7,10,32,10,-20,-34,-35,-36,-37,-38,-39,-40,-42,-31,-41,10,10,-53,-31,-30,-33,10,-32,-29,-45,-49,-43,-46,-51,]),'$end':([1,2,3,4,5,11,16,18,42,43,44,45,46,47,48,49,51,87,93,147,148,149,155,156,158,],[0,-1,-3,-4,-5,-2,-6,-7,-20,-34,-35,-36,-37,-38,-39,-40,-42,-41,-53,-29,-45,-49,-43,-46,-51,]),'error':([6,7,8,9,10,125,],[13,-16,-17,-18,-19,13,]),'ID':([6,7,8,9,10,16,17,18,21,24,36,39,41,43,44,45,46,47,48,49,51,52,56,63,66,69,73,74,85,87,88,89,90,93,94,95,96,97,98,99,100,101,105,106,107,108,109,110,111,112,114,115,116,123,124,125,128,139,142,143,145,147,148,149,150,152,153,155,156,157,158,],[14,-16,-17,-18,-19,-6,23,-7,29,35,40,35,40,-34,-35,-36,-37,-38,-39,-40,-42,-31,40,-44,104,104,-80,-81,40,-41,40,40,40,-53,40,40,40,-60,-61,-62,-63,104,104,104,-72,-73,-74,-75,-76,-77,104,-84,-85,-30,40,23,40,40,40,40,40,-29,-45,-49,40,40,-48,-43,-46,40,-51,]),'SEMICOLON':([12,13,14,15,16,18,22,23,29,30,31,32,36,38,40,43,44,45,46,47,48,49,50,51,52,56,57,58,59,63,64,65,67,68,70,71,72,75,76,77,78,79,82,83,87,88,93,102,103,104,113,121,123,124,130,131,132,133,134,135,136,137,138,142,143,144,147,148,149,152,153,155,156,157,158,],[16,18,-10,-9,-6,-7,-8,-10,-12,-13,-14,-15,51,-11,-64,-34,-35,-36,-37,-38,-39,-40,87,-42,-31,51,93,-89,-59,-44,-94,-67,-69,-71,-79,-83,-87,-90,-91,-92,-93,-95,-57,-58,-41,51,-53,-68,-89,-64,-86,-88,-30,51,-54,-55,-56,-66,-70,-78,-82,-65,-96,51,51,150,-29,-45,-49,51,-48,-43,-46,51,-51,]),'COMMA':([12,14,15,22,23,26,27,29,30,31,32,33,34,35,38,40,58,59,64,65,67,68,70,71,72,75,76,77,78,79,80,81,82,83,102,103,104,113,119,120,121,130,131,132,133,134,135,136,137,138,146,],[17,-10,-9,-8,-10,37,-24,-12,-13,-14,-15,39,-27,-28,-11,-64,-89,-59,-94,-67,-69,-71,-79,-83,-87,-90,-91,-92,-93,-95,-23,-26,-57,-58,-68,-89,-64,-86,139,-100,-88,-54,-55,-56,-66,-70,-78,-82,-65,-96,-99,]),'LPAREN':([14,16,18,36,40,41,43,44,45,46,47,48,49,51,52,53,54,55,56,60,61,62,63,66,69,73,74,85,87,88,89,90,93,94,95,96,97,98,99,100,101,104,105,106,107,108,109,110,111,112,114,115,116,123,124,128,129,139,142,143,145,147,148,149,150,152,153,155,156,157,158,],[19,-6,-7,41,85,41,-34,-35,-36,-37,-38,-39,-40,-42,-31,89,90,91,41,-47,-50,-52,-44,41,41,-80,-81,41,-41,41,41,41,-53,41,41,41,-60,-61,-62,-63,41,85,41,41,-72,-73,-74,-75,-76,-77,41,-84,-85,-30,41,41,145,41,41,41,41,-29,-45,-49,41,41,-48,-43,-46,41,-51,]),'OPENBR':([14,23,40,104,],[20,20,84,84,]),'ASSIGN':([14,23,40,58,137,],[21,21,-64,94,-65,]),'OBRACELET':([16,18,36,43,44,45,46,47,48,49,51,52,56,63,87,88,93,123,124,142,143,147,148,149,152,153,155,156,157,158,],[-6,-7,52,-34,-35,-36,-37,-38,-39,-40,-42,-31,52,-44,-41,52,-53,-30,52,52,52,-29,-45,-49,52,-48,-43,-46,52,-51,]),'BREAK':([16,18,36,43,44,45,46,47,48,49,51,52,56,63,87,88,93,123,124,142,143,147,148,149,152,153,155,156,157,158,],[-6,-7,57,-34,-35,-36,-37,-38,-39,-40,-42,-31,57,-44,-41,57,-53,-30,57,57,57,-29,-45,-49,57,-48,-43,-46,57,-51,]),'IF':([16,18,36,43,44,45,46,47,48,49,51,52,56,63,87,88,93,123,124,142,143,147,148,149,152,153,155,156,157,158,],[-6,-7,60,-34,-35,-36,-37,-38,-39,-40,-42,-31,60,-44,-41,60,-53,-30,60,60,60,-29,-45,-49,60,-48,-43,-46,60,-51,]),'WHILE':([16,18,36,43,44,45,46,47,48,49,51,52,56,63,87,88,92,93,123,124,142,143,147,148,149,152,153,155,156,157,158,],[-6,-7,61,-34,-35,-36,-37,-38,-39,-40,-42,-31,61,-44,-41,61,61,-53,-30,61,61,61,-29,-45,-49,61,-48,-43,-46,61,-51,]),'FOR':([16,18,36,43,44,45,46,47,48,49,51,52,56,63,87,88,93,123,124,142,143,147,148,149,152,153,155,156,157,158,],[-6,-7,62,-34,-35,-36,-37,-38,-39,-40,-42,-31,62,-44,-41,62,-53,-30,62,62,62,-29,-45,-49,62,-48,-43,-46,62,-51,]),'DO':([16,18,36,43,44,45,46,47,48,49,51,52,56,63,87,88,93,123,124,142,143,147,148,149,152,153,155,156,157,158,],[-6,-7,63,-34,-35,-36,-37,-38,-39,-40,-42,-31,63,-44,-41,63,-53,-30,63,63,63,-29,-45,-49,63,-48,-43,-46,63,-51,]),'NOTEQUAL':([16,18,36,40,41,43,44,45,46,47,48,49,51,52,56,58,63,64,66,68,70,71,72,75,76,77,78,79,85,87,88,89,90,93,94,95,96,97,98,99,100,101,103,104,113,121,123,124,128,135,136,137,138,139,142,143,145,147,148,149,150,152,153,155,156,157,158,],[-6,-7,66,-64,66,-34,-35,-36,-37,-38,-39,-40,-42,-31,66,-89,-44,-94,66,112,-79,-83,-87,-90,-91,-92,-93,-95,66,-41,66,66,66,-53,66,66,66,-60,-61,-62,-63,66,-89,-64,-86,-88,-30,66,66,-78,-82,-65,-96,66,66,66,66,-29,-45,-49,66,66,-48,-43,-46,66,-51,]),'PLUS':([16,18,36,40,41,43,44,45,46,47,48,49,51,52,56,58,63,64,66,68,69,70,71,72,73,74,75,76,77,78,79,85,87,88,89,90,93,94,95,96,97,98,99,100,101,103,104,105,106,107,108,109,110,111,112,113,114,115,116,121,123,124,128,134,135,136,137,138,139,142,143,145,147,148,149,150,152,153,155,156,157,158,],[-6,-7,73,-64,73,-34,-35,-36,-37,-38,-39,-40,-42,-31,73,-89,-44,-94,73,73,73,-79,-83,-87,-80,-81,-90,-91,-92,-93,-95,73,-41,73,73,73,-53,73,73,73,-60,-61,-62,-63,73,-89,-64,73,73,-72,-73,-74,-75,-76,-77,-86,73,-84,-85,-88,-30,73,73,73,-78,-82,-65,-96,73,73,73,73,-29,-45,-49,73,73,-48,-43,-46,73,-51,]),'MINUS':([16,18,36,40,41,43,44,45,46,47,48,49,51,52,56,58,63,64,66,68,69,70,71,72,73,74,75,76,77,78,79,85,87,88,89,90,93,94,95,96,97,98,99,100,101,103,104,105,106,107,108,109,110,111,112,113,114,115,116,121,123,124,128,134,135,136,137,138,139,142,143,145,147,148,149,150,152,153,155,156,157,158,],[-6,-7,74,-64,74,-34,-35,-36,-37,-38,-39,-40,-42,-31,74,-89,-44,-94,74,74,74,-79,-83,-87,-80,-81,-90,-91,-92,-93,-95,74,-41,74,74,74,-53,74,74,74,-60,-61,-62,-63,74,-89,-64,74,74,-72,-73,-74,-75,-76,-77,-86,74,-84,-85,-88,-30,74,74,74,-78,-82,-65,-96,74,74,74,74,-29,-45,-49,74,74,-48,-43,-46,74,-51,]),'TRUE':([16,18,36,41,43,44,45,46,47,48,49,51,52,56,63,66,69,73,74,85,87,88,89,90,93,94,95,96,97,98,99,100,101,105,106,107,108,109,110,111,112,114,115,116,123,124,128,139,142,143,145,147,148,149,150,152,153,155,156,157,158,],[-6,-7,77,77,-34,-35,-36,-37,-38,-39,-40,-42,-31,77,-44,77,77,-80,-81,77,-41,77,77,77,-53,77,77,77,-60,-61,-62,-63,77,77,77,-72,-73,-74,-75,-76,-77,77,-84,-85,-30,77,77,77,77,77,77,-29,-45,-49,77,77,-48,-43,-46,77,-51,]),'FALSE':([16,18,36,41,43,44,45,46,47,48,49,51,52,56,63,66,69,73,74,85,87,88,89,90,93,94,95,96,97,98,99,100,101,105,106,107,108,109,110,111,112,114,115,116,123,124,128,139,142,143,145,147,148,149,150,152,153,155,156,157,158,],[-6,-7,78,78,-34,-35,-36,-37,-38,-39,-40,-42,-31,78,-44,78,78,-80,-81,78,-41,78,78,78,-53,78,78,78,-60,-61,-62,-63,78,78,78,-72,-73,-74,-75,-76,-77,78,-84,-85,-30,78,78,78,78,78,78,-29,-45,-49,78,78,-48,-43,-46,78,-51,]),'NUMBER':([16,18,20,21,36,41,43,44,45,46,47,48,49,51,52,56,63,66,69,73,74,84,85,87,88,89,90,93,94,95,96,97,98,99,100,101,105,106,107,108,109,110,111,112,114,115,116,123,124,128,139,142,143,145,147,148,149,150,152,153,155,156,157,158,],[-6,-7,28,30,64,64,-34,-35,-36,-37,-38,-39,-40,-42,-31,64,-44,64,64,-80,-81,117,64,-41,64,64,64,-53,64,64,64,-60,-61,-62,-63,64,64,64,-72,-73,-74,-75,-76,-77,64,-84,-85,-30,64,64,64,64,64,64,-29,-45,-49,64,64,-48,-43,-46,64,-51,]),'FLOAT_NUMBER':([16,18,21,36,41,43,44,45,46,47,48,49,51,52,56,63,66,69,73,74,85,87,88,89,90,93,94,95,96,97,98,99,100,101,105,106,107,108,109,110,111,112,114,115,116,123,124,128,139,142,143,145,147,148,149,150,152,153,155,156,157,158,],[-6,-7,31,79,79,-34,-35,-36,-37,-38,-39,-40,-42,-31,79,-44,79,79,-80,-81,79,-41,79,79,79,-53,79,79,79,-60,-61,-62,-63,79,79,79,-72,-73,-74,-75,-76,-77,79,-84,-85,-30,79,79,79,79,79,79,-29,-45,-49,79,79,-48,-43,-46,79,-51,]),'CBRACELET':([16,18,43,44,45,46,47,48,49,51,52,87,88,93,122,123,124,140,141,147,148,149,155,156,158,],[-6,-7,-34,-35,-36,-37,-38,-39,-40,-42,-31,-41,-33,-53,-31,-30,-33,147,-32,-29,-45,-49,-43,-46,-51,]),'RPAREN':([19,25,26,27,33,34,35,40,58,59,64,65,67,68,70,71,72,75,76,77,78,79,80,81,82,83,85,86,102,103,104,113,118,119,120,121,126,127,130,131,132,133,134,135,136,137,138,146,151,154,],[-22,36,-21,-24,-25,-27,-28,-64,-89,-59,-94,-67,-69,-71,-79,-83,-87,-90,-91,-92,-93,-95,-23,-26,-57,-58,-98,121,-68,-89,-64,-86,138,-97,-100,-88,142,143,-54,-55,-56,-66,-70,-78,-82,-65,-96,-99,155,157,]),'CLOSEBR':([28,117,],[38,137,]),'PLUSPLUS':([40,],[82,]),'MINUSMINUS':([40,],[83,]),'PLUS_ASSIGN':([40,58,137,],[-64,97,-65,]),'MINUS_ASSIGN':([40,58,137,],[-64,98,-65,]),'TIMES_ASSIGN':([40,58,137,],[-64,99,-65,]),'DIVIDE_ASSIGN':([40,58,137,],[-64,100,-65,]),'TIMES':([40,58,64,70,71,72,75,76,77,78,79,103,104,113,121,135,136,137,138,],[-64,-89,-94,115,-83,-87,-90,-91,-92,-93,-95,-89,-64,-86,-88,115,-82,-65,-96,]),'DIVIDE':([40,58,64,70,71,72,75,76,77,78,79,103,104,113,121,135,136,137,138,],[-64,-89,-94,116,-83,-87,-90,-91,-92,-93,-95,-89,-64,-86,-88,116,-82,-65,-96,]),'EQUALS':([40,58,64,68,70,71,72,75,76,77,78,79,103,104,113,121,135,136,137,138,],[-64,-89,-94,107,-79,-83,-87,-90,-91,-92,-93,-95,-89,-64,-86,-88,-78,-82,-65,-96,]),'LESS':([40,58,64,68,70,71,72,75,76,77,78,79,103,104,113,121,135,136,137,138,],[-64,-89,-94,108,-79,-83,-87,-90,-91,-92,-93,-95,-89,-64,-86,-88,-78,-82,-65,-96,]),'LARGE':([40,58,64,68,70,71,72,75,76,77,78,79,103,104,113,121,135,136,137,138,],[-64,-89,-94,109,-79,-83,-87,-90,-91,-92,-93,-95,-89,-64,-86,-88,-78,-82,-65,-96,]),'LARGETHAN':([40,58,64,68,70,71,72,75,76,77,78,79,103,104,113,121,135,136,137,138,],[-64,-89,-94,110,-79,-83,-87,-90,-91,-92,-93,-95,-89,-64,-86,-88,-78,-82,-65,-96,]),'LESSTHAN':([40,58,64,68,70,71,72,75,76,77,78,79,103,104,113,121,135,136,137,138,],[-64,-89,-94,111,-79,-83,-87,-90,-91,-92,-93,-95,-89,-64,-86,-88,-78,-82,-65,-96,]),'AND':([40,58,59,64,65,67,68,70,71,72,75,76,77,78,79,102,103,104,113,121,133,134,135,136,137,138,],[-64,-89,101,-94,-67,-69,-71,-79,-83,-87,-90,-91,-92,-93,-95,-68,-89,-64,-86,-88,-66,-70,-78,-82,-65,-96,]),'ELSE':([43,44,45,46,47,48,49,51,87,93,147,148,149,155,156,158,],[-34,-35,-36,-37,-38,-39,-40,-42,-41,-53,-29,153,-49,-43,-46,-51,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'declaration_list':([0,],[2,]),'declaration':([0,2,],[3,11,]),'var_declaration':([0,2,88,91,140,],[4,4,123,128,123,]),'fun_declaration':([0,2,],[5,5,]),'type_specifier':([0,2,19,37,88,91,140,],[6,6,24,24,125,125,125,]),'var_decl_list':([6,125,],[12,12,]),'var_decl_id':([6,17,125,],[15,22,15,]),'params':([19,],[25,]),'param_list':([19,],[26,]),'param_type_list':([19,37,],[27,80,]),'param_id_list':([24,],[33,]),'param_id':([24,39,],[34,81,]),'statement':([36,56,88,124,142,143,152,157,],[42,92,124,124,148,149,156,158,]),'expression_stmt':([36,56,88,124,142,143,152,157,],[43,43,43,43,43,43,43,43,]),'compound_stmt':([36,56,88,124,142,143,152,157,],[44,44,44,44,44,44,44,44,]),'if_stmt':([36,56,88,124,142,143,152,157,],[45,45,45,45,45,45,45,45,]),'while_stmt':([36,56,88,124,142,143,152,157,],[46,46,46,46,46,46,46,46,]),'for_stmt':([36,56,88,124,142,143,152,157,],[47,47,47,47,47,47,47,47,]),'do_while_stmt':([36,56,88,124,142,143,152,157,],[48,48,48,48,48,48,48,48,]),'break_stmt':([36,56,88,124,142,143,152,157,],[49,49,49,49,49,49,49,49,]),'expression':([36,41,56,85,88,89,90,94,95,96,124,128,139,142,143,145,150,152,157,],[50,86,50,120,50,126,127,130,131,132,50,144,146,50,50,151,154,50,50,]),'if':([36,56,88,124,142,143,152,157,],[53,53,53,53,53,53,53,53,]),'while':([36,56,88,92,124,142,143,152,157,],[54,54,54,129,54,54,54,54,54,]),'for':([36,56,88,124,142,143,152,157,],[55,55,55,55,55,55,55,55,]),'do':([36,56,88,124,142,143,152,157,],[56,56,56,56,56,56,56,56,]),'var':([36,41,56,66,69,85,88,89,90,94,95,96,101,105,106,114,124,128,139,142,143,145,150,152,157,],[58,58,58,103,103,58,58,58,58,58,58,58,103,103,103,103,58,58,58,58,58,58,58,58,58,]),'simple_expression':([36,41,56,85,88,89,90,94,95,96,124,128,139,142,143,145,150,152,157,],[59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,]),'unary_rel_expression':([36,41,56,66,85,88,89,90,94,95,96,101,124,128,139,142,143,145,150,152,157,],[65,65,65,102,65,65,65,65,65,65,65,133,65,65,65,65,65,65,65,65,65,]),'rel_expression':([36,41,56,66,85,88,89,90,94,95,96,101,124,128,139,142,143,145,150,152,157,],[67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,]),'add_expression':([36,41,56,66,85,88,89,90,94,95,96,101,105,124,128,139,142,143,145,150,152,157,],[68,68,68,68,68,68,68,68,68,68,68,68,134,68,68,68,68,68,68,68,68,68,]),'addop':([36,41,56,66,68,69,85,88,89,90,94,95,96,101,105,106,114,124,128,134,139,142,143,145,150,152,157,],[69,69,69,69,106,69,69,69,69,69,69,69,69,69,69,69,69,69,69,106,69,69,69,69,69,69,69,]),'term':([36,41,56,66,85,88,89,90,94,95,96,101,105,106,124,128,139,142,143,145,150,152,157,],[70,70,70,70,70,70,70,70,70,70,70,70,70,135,70,70,70,70,70,70,70,70,70,]),'unary_expression':([36,41,56,66,69,85,88,89,90,94,95,96,101,105,106,114,124,128,139,142,143,145,150,152,157,],[71,71,71,71,113,71,71,71,71,71,71,71,71,71,71,136,71,71,71,71,71,71,71,71,71,]),'factor':([36,41,56,66,69,85,88,89,90,94,95,96,101,105,106,114,124,128,139,142,143,145,150,152,157,],[72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,]),'call':([36,41,56,66,69,85,88,89,90,94,95,96,101,105,106,114,124,128,139,142,143,145,150,152,157,],[75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,]),'constant':([36,41,56,66,69,85,88,89,90,94,95,96,101,105,106,114,124,128,139,142,143,145,150,152,157,],[76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,]),'local_declarations':([52,122,],[88,140,]),'addopration_expression':([58,],[95,]),'mulopration_expression':([58,],[96,]),'relop':([68,],[105,]),'mulop':([70,135,],[114,114,]),'args':([85,],[118,]),'args_list':([85,],[119,]),'statement_list':([88,124,],[122,141,]),'else':([148,],[152,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> declaration_list','program',1,'p_program','pp.py',295),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list_Loop','pp.py',301),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','pp.py',307),
  ('declaration -> var_declaration','declaration',1,'p_declaration_var','pp.py',313),
  ('declaration -> fun_declaration','declaration',1,'p_declaration_fun','pp.py',318),
  ('var_declaration -> type_specifier var_decl_list SEMICOLON','var_declaration',3,'p_var_declaration','pp.py',324),
  ('var_declaration -> type_specifier error SEMICOLON','var_declaration',3,'p_var_declaration_error','pp.py',333),
  ('var_decl_list -> var_decl_list COMMA var_decl_id','var_decl_list',3,'p_var_decl_list_loop','pp.py',338),
  ('var_decl_list -> var_decl_id','var_decl_list',1,'p_var_decl_list','pp.py',343),
  ('var_decl_id -> ID','var_decl_id',1,'p_var_decl_id','pp.py',349),
  ('var_decl_id -> ID OPENBR NUMBER CLOSEBR','var_decl_id',4,'p_var_decl_array','pp.py',355),
  ('var_decl_id -> ID ASSIGN ID','var_decl_id',3,'p_var_decl_ids','pp.py',363),
  ('var_decl_id -> ID ASSIGN NUMBER','var_decl_id',3,'p_var_decl_ids','pp.py',364),
  ('var_decl_id -> ID ASSIGN FLOAT_NUMBER','var_decl_id',3,'p_var_decl_ids','pp.py',365),
  ('var_decl_id -> ID ASSIGN STRING','var_decl_id',3,'p_var_decl_ids','pp.py',366),
  ('type_specifier -> INT','type_specifier',1,'p_type_specifier','pp.py',375),
  ('type_specifier -> FLOAT','type_specifier',1,'p_type_specifier','pp.py',376),
  ('type_specifier -> VOID','type_specifier',1,'p_type_specifier','pp.py',377),
  ('type_specifier -> STRING','type_specifier',1,'p_type_specifier','pp.py',378),
  ('fun_declaration -> type_specifier ID LPAREN params RPAREN statement','fun_declaration',6,'p_fun_declaration','pp.py',384),
  ('params -> param_list','params',1,'p_params','pp.py',392),
  ('params -> <empty>','params',0,'p_params_eps','pp.py',397),
  ('param_list -> param_list COMMA param_type_list','param_list',3,'p_param_list__loop','pp.py',402),
  ('param_list -> param_type_list','param_list',1,'p_param_list','pp.py',407),
  ('param_type_list -> type_specifier param_id_list','param_type_list',2,'p_param_type_list','pp.py',412),
  ('param_id_list -> param_id_list COMMA param_id','param_id_list',3,'p_param_id_list_loop','pp.py',417),
  ('param_id_list -> param_id','param_id_list',1,'p_param_id_list','pp.py',422),
  ('param_id -> ID','param_id',1,'p_param_id','pp.py',427),
  ('compound_stmt -> OBRACELET local_declarations statement_list local_declarations CBRACELET','compound_stmt',5,'p_compound_stmt','pp.py',432),
  ('local_declarations -> local_declarations var_declaration','local_declarations',2,'p_local_declarations','pp.py',439),
  ('local_declarations -> <empty>','local_declarations',0,'p_local_declarations_eps','pp.py',444),
  ('statement_list -> statement statement_list','statement_list',2,'p_statement_list','pp.py',449),
  ('statement_list -> <empty>','statement_list',0,'p_statement_list_eps','pp.py',454),
  ('statement -> expression_stmt','statement',1,'p_statement','pp.py',459),
  ('statement -> compound_stmt','statement',1,'p_statement','pp.py',460),
  ('statement -> if_stmt','statement',1,'p_statement','pp.py',461),
  ('statement -> while_stmt','statement',1,'p_statement','pp.py',462),
  ('statement -> for_stmt','statement',1,'p_statement','pp.py',463),
  ('statement -> do_while_stmt','statement',1,'p_statement','pp.py',464),
  ('statement -> break_stmt','statement',1,'p_statement','pp.py',465),
  ('expression_stmt -> expression SEMICOLON','expression_stmt',2,'p_expression_stmt','pp.py',474),
  ('expression_stmt -> SEMICOLON','expression_stmt',1,'p_expression_stmt_eps','pp.py',480),
  ('do_while_stmt -> do statement while LPAREN expression RPAREN','do_while_stmt',6,'p_do_while_stmt','pp.py',485),
  ('do -> DO','do',1,'p_do','pp.py',491),
  ('if_stmt -> if LPAREN expression RPAREN statement','if_stmt',5,'p_if_stmt','pp.py',496),
  ('if_stmt -> if LPAREN expression RPAREN statement else statement','if_stmt',7,'p_elif_stmt','pp.py',504),
  ('if -> IF','if',1,'p_if','pp.py',515),
  ('else -> ELSE','else',1,'p_else','pp.py',521),
  ('while_stmt -> while LPAREN expression RPAREN statement','while_stmt',5,'p_while_stmt','pp.py',530),
  ('while -> WHILE','while',1,'p_while','pp.py',539),
  ('for_stmt -> for LPAREN var_declaration expression SEMICOLON expression RPAREN statement','for_stmt',8,'p_for_stmt','pp.py',546),
  ('for -> FOR','for',1,'p_for','pp.py',553),
  ('break_stmt -> BREAK SEMICOLON','break_stmt',2,'p_break_stmt','pp.py',559),
  ('expression -> var ASSIGN expression','expression',3,'p_expression','pp.py',569),
  ('expression -> var addopration_expression expression','expression',3,'p_expression','pp.py',570),
  ('expression -> var mulopration_expression expression','expression',3,'p_expression','pp.py',571),
  ('expression -> ID PLUSPLUS','expression',2,'p_expression','pp.py',572),
  ('expression -> ID MINUSMINUS','expression',2,'p_expression','pp.py',573),
  ('expression -> simple_expression','expression',1,'p_expression_simple','pp.py',592),
  ('addopration_expression -> PLUS_ASSIGN','addopration_expression',1,'p_addopration_expression','pp.py',598),
  ('addopration_expression -> MINUS_ASSIGN','addopration_expression',1,'p_addopration_expression','pp.py',599),
  ('mulopration_expression -> TIMES_ASSIGN','mulopration_expression',1,'p_mulopration_expression','pp.py',605),
  ('mulopration_expression -> DIVIDE_ASSIGN','mulopration_expression',1,'p_mulopration_expression','pp.py',606),
  ('var -> ID','var',1,'p_var','pp.py',612),
  ('var -> ID OPENBR NUMBER CLOSEBR','var',4,'p_var_Array','pp.py',619),
  ('simple_expression -> simple_expression AND unary_rel_expression','simple_expression',3,'p_simple_expression','pp.py',626),
  ('simple_expression -> unary_rel_expression','simple_expression',1,'p_simple_expression_unary','pp.py',632),
  ('unary_rel_expression -> NOTEQUAL unary_rel_expression','unary_rel_expression',2,'p_note_unary_rel_expression','pp.py',638),
  ('unary_rel_expression -> rel_expression','unary_rel_expression',1,'p_unary_rel_expression','pp.py',644),
  ('rel_expression -> add_expression relop add_expression','rel_expression',3,'p_rel_expression','pp.py',650),
  ('rel_expression -> add_expression','rel_expression',1,'p_rel_expression_add','pp.py',658),
  ('relop -> EQUALS','relop',1,'p_relop','pp.py',664),
  ('relop -> LESS','relop',1,'p_relop','pp.py',665),
  ('relop -> LARGE','relop',1,'p_relop','pp.py',666),
  ('relop -> LARGETHAN','relop',1,'p_relop','pp.py',667),
  ('relop -> LESSTHAN','relop',1,'p_relop','pp.py',668),
  ('relop -> NOTEQUAL','relop',1,'p_relop','pp.py',669),
  ('add_expression -> add_expression addop term','add_expression',3,'p_add_expression','pp.py',675),
  ('add_expression -> term','add_expression',1,'p_add_expression_term','pp.py',685),
  ('addop -> PLUS','addop',1,'p_addop','pp.py',691),
  ('addop -> MINUS','addop',1,'p_addop','pp.py',692),
  ('term -> term mulop unary_expression','term',3,'p_term','pp.py',699),
  ('term -> unary_expression','term',1,'p_term_unary','pp.py',707),
  ('mulop -> TIMES','mulop',1,'p_mulop','pp.py',714),
  ('mulop -> DIVIDE','mulop',1,'p_mulop','pp.py',715),
  ('unary_expression -> addop unary_expression','unary_expression',2,'p_unary_expression','pp.py',721),
  ('unary_expression -> factor','unary_expression',1,'p_unary_expression_fact','pp.py',727),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor','pp.py',733),
  ('factor -> var','factor',1,'p_factor','pp.py',734),
  ('factor -> call','factor',1,'p_factor','pp.py',735),
  ('factor -> constant','factor',1,'p_factor','pp.py',736),
  ('constant -> TRUE','constant',1,'p_constant','pp.py',745),
  ('constant -> FALSE','constant',1,'p_constant','pp.py',746),
  ('constant -> NUMBER','constant',1,'p_constant_number','pp.py',752),
  ('constant -> FLOAT_NUMBER','constant',1,'p_constant_float_number','pp.py',758),
  ('call -> ID LPAREN args RPAREN','call',4,'p_call','pp.py',763),
  ('args -> args_list','args',1,'p_args','pp.py',769),
  ('args -> <empty>','args',0,'p_args','pp.py',770),
  ('args_list -> args_list COMMA expression','args_list',3,'p_args_list','pp.py',775),
  ('args_list -> expression','args_list',1,'p_args_list','pp.py',776),
]
